# Logs
react_vite/logs
react_vite/*.log
react_vite/npm-debug.log*
react_vite/yarn-debug.log*
react_vite/yarn-error.log*
react_vite/pnpm-debug.log*
react_vite/lerna-debug.log*
react_vite/.vite
react_vite/node_modules

react_vite/react_vite/node_modules
react_vite/dist
react_vite/dist-ssr
react_vite/*.local

# Editor directories and files
react_vite/.vscode/*
react_vite/!.vscode/extensions.json
react_vite/.idea
react_vite/.DS_Store
react_vite/*.suo
react_vite/*.ntvs*
react_vite/*.njsproj
react_vite/*.sln
react_vite/*.sw?
.idea


# Distribution / packaging


# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs

# Unit test / coverage reports
fast_application/htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
fast_application/cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
fast_application/local_settings.py
fast_application/db.sqlite3
fast_application/db.sqlite3-journal

# Flask stuff:
fast_application/instance/
fast_application/.webassets-cache

# Scrapy stuff:
fast_application/.scrapy

# Sphinx documentation
fast_application/docs/_build/

# PyBuilder
fast_application/.pybuilder/
fast_application/target/

# Jupyter Notebook
fast_application/.ipynb_checkpoints

# IPython
fast_application/profile_default/
fast_application/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
fast_application/.pdm.toml
fast_application/.pdm-python
fast_application/.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
fast_application/__pypackages__/

# Celery stuff
fast_application/celerybeat-schedule
fast_application/celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
fast_application/.env
fast_application/.venv
fast_application/env/
fast_application/venv/
fast_application/ENV/
fast_application/env.bak/
fast_application/venv.bak/

# Spyder project settings
fast_application/.spyderproject
fast_application/.spyproject

# Rope project settings
fast_application/.ropeproject

# mkdocs documentation
fast_application//site

# mypy
fast_application/.mypy_cache/
fast_application/.dmypy.json
fast_application/dmypy.json

# Pyre type checker
fast_application/.pyre/

# pytype static type analyzer
fast_application/.pytype/

# Cython debug symbols
fast_application/cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
fast_application/.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
fast_application/.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer,
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
fast_application/.ruff_cache/

# PyPI configuration file
fast_application/.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
fast_application/.cursorignore
fast_application/.cursorindexingignore
